{"version":3,"sources":["api/library.jsx","components/Shape.jsx","components/Autocomplete.jsx","components/Input.jsx","components/BooksList.jsx","App.jsx","index.jsx"],"names":["BASE_URL","loadBooks","a","request","fetch","response","json","BooksListShape","id","PropTypes","string","isRequired","volumeInfo","shape","title","authors","array","imageLinks","smallThumbnail","Autocomplete","func","arrayOf","bool","autocomplete","loadData","className","map","type","onClick","Input","query","handleQuery","handleSubmit","autocompleteError","autocompleteStatus","onChange","value","BooksList","books","src","undefined","alt","author","App","useState","setBooks","setQuery","statusError","setStatusError","setAutocomplete","setAutocompleteError","setAutocompleteStatus","loadAutocomplete","part","items","queryAutocomplete","useCallback","debounce","totalItems","event","target","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0210bdbd.chunk.js","sourcesContent":["const BASE_URL = 'https://www.googleapis.com/books/v1/volumes?q=';\n\nexport const loadBooks = async(request = '') => {\n  const response = await fetch(BASE_URL + request);\n\n  return response.json();\n};\n","import PropTypes from 'prop-types';\n\nexport const BooksListShape = {\n  id: PropTypes.string.isRequired,\n  volumeInfo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    authors: PropTypes.array.isRequired,\n    imageLinks: PropTypes.shape({\n      smallThumbnail: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n}.isRequired;\n\nexport const InputShape = {\n  query: PropTypes.string.isRequired,\n  handleQuery: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  autocomplete: PropTypes.arrayOf(BooksListShape).isRequired,\n  autocompleteError: PropTypes.bool.isRequired,\n  autocompleteStatus: PropTypes.bool.isRequired,\n  loadData: PropTypes.func.isRequired,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BooksListShape } from './Shape';\n\nexport const Autocomplete = ({ autocomplete, loadData }) => (\n  <div className=\"ui selection dropdown\">\n    {autocomplete.map(({ volumeInfo, id }) => (\n      <button\n        key={id}\n        type=\"button\"\n        className=\"autocomplete__item\"\n        onClick={() => loadData(volumeInfo.title)}\n      >\n        {volumeInfo.title}\n      </button>\n    ))}\n  </div>\n);\n\nAutocomplete.propTypes = {\n  loadData: PropTypes.func.isRequired,\n  autocomplete: PropTypes.arrayOf(BooksListShape).isRequired,\n}.isRequired;\n","import React from 'react';\nimport { InputShape } from './Shape';\nimport { Autocomplete } from './Autocomplete';\n\nexport const Input = ({\n  query,\n  handleQuery,\n  handleSubmit,\n  autocomplete,\n  autocompleteError,\n  autocompleteStatus,\n  loadData,\n}) => (\n  <div className=\"container__right\">\n    <form>\n      <input\n        className=\"ui selection dropdown\"\n        onChange={handleQuery}\n        value={query}\n      />\n\n      <button\n        className=\"ui primary button\"\n        onClick={handleSubmit}\n        type=\"submit\"\n      >\n        search\n      </button>\n    </form>\n\n    {\n      autocompleteStatus\n      && (autocompleteError\n        ? <div>No matches</div>\n        : <Autocomplete loadData={loadData} autocomplete={autocomplete} />)\n    }\n  </div>\n);\n\nInput.propTypes = InputShape;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BooksListShape } from './Shape';\n\nexport const BooksList = ({ books }) => (\n  <div className=\"books\">\n    {books.map(({ volumeInfo, id }) => (\n      <div className=\"book\" key={id}>\n        <img\n          className=\"book__img\"\n          src={volumeInfo.imageLinks === undefined\n            ? 'https://logodix.com/logo/1338312.png'\n            : volumeInfo.imageLinks.smallThumbnail}\n          alt={volumeInfo.title}\n        />\n\n        <div>\n          <h4>\n            {volumeInfo.title}\n          </h4>\n        </div>\n\n        <div>\n          {volumeInfo.authors && volumeInfo.authors.map(author => (\n            <div>{author}</div>\n          ))}\n        </div>\n      </div>\n    ))}\n  </div>\n);\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(BooksListShape).isRequired,\n}.isRequired;\n","import React, { useState, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport './App.scss';\nimport { loadBooks } from './api/library';\nimport { Input } from './components/Input';\nimport { BooksList } from './components/BooksList';\n\nexport const App = () => {\n  const [books, setBooks] = useState([]);\n  const [query, setQuery] = useState('');\n  const [statusError, setStatusError] = useState(false);\n  const [autocomplete, setAutocomplete] = useState([]);\n  const [autocompleteError, setAutocompleteError] = useState(false);\n  const [autocompleteStatus, setAutocompleteStatus] = useState(false);\n\n  const handleQuery = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n\n    if (value === '') {\n      setAutocompleteStatus(false);\n\n      return;\n    }\n\n    setAutocompleteStatus(true);\n    queryAutocomplete(value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (query === '') {\n      setAutocompleteError(true);\n      setStatusError(true);\n\n      return;\n    }\n\n    loadData(query);\n  };\n\n  const loadAutocomplete = async(part) => {\n    const response = await loadBooks(part);\n    const result = response.items;\n\n    if (result === undefined) {\n      setAutocompleteError(true);\n\n      return;\n    }\n\n    setAutocompleteError(false);\n    setAutocomplete(response.items);\n  };\n\n  const queryAutocomplete = useCallback(debounce(loadAutocomplete, 500), []);\n\n  const loadData = async(title) => {\n    const response = await loadBooks(title);\n\n    if (response.totalItems === 0) {\n      setStatusError(true);\n    } else {\n      setStatusError(false);\n      setBooks(response.items);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"container__left\">\n        {statusError\n          ? <div>Invalid entry, no books found!</div>\n          : <BooksList books={books} />}\n      </div>\n\n      <Input\n        query={query}\n        handleQuery={handleQuery}\n        handleSubmit={handleSubmit}\n        autocomplete={autocomplete}\n        autocompleteError={autocompleteError}\n        autocompleteStatus={autocompleteStatus}\n        loadData={loadData}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}